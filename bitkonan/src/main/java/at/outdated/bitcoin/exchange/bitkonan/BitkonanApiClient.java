package at.outdated.bitcoin.exchange.bitkonan;

import at.outdated.bitcoin.exchange.api.OrderId;
import at.outdated.bitcoin.exchange.api.account.Balance;
import at.outdated.bitcoin.exchange.api.account.WalletTransaction;
import at.outdated.bitcoin.exchange.api.client.RestExchangeClient;
import at.outdated.bitcoin.exchange.api.currency.CurrencyValue;
import at.outdated.bitcoin.exchange.api.market.Market;
import at.outdated.bitcoin.exchange.api.account.AccountInfo;
import at.outdated.bitcoin.exchange.api.currency.Currency;
import at.outdated.bitcoin.exchange.api.market.*;
import at.outdated.bitcoin.exchange.api.market.fee.SimplePercentageFee;
import org.apache.commons.codec.binary.Hex;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.json.JsonObject;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.Invocation;
import javax.ws.rs.client.WebTarget;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.Future;

/**
 * Created with IntelliJ IDEA.
 * User: ebirn
 * Date: 26.05.13
 * Time: 23:43
 * To change this template use File | Settings | File Templates.
 */
public class BitkonanApiClient extends RestExchangeClient {

    public BitkonanApiClient(Market market) {
        super(market);

        tradeFee = new SimplePercentageFee("0.0029");
    }

    @Override
    public AccountInfo getAccountInfo() {

        //  https://bitkonan.com/api/balance/
        // https://bitkonan.com/api/open_orders

        WebTarget balanceTarget = client.target("https://bitkonan.com/api/balance/");
        WebTarget ordersTarget = client.target("https://bitkonan.com/api/open_orders");


        Future<String> rawBalance = asyncRequest(balanceTarget, String.class, "GET", null, true);
        Future<String> rawOrders = asyncRequest(ordersTarget, String.class , "GET", null, true);

        try {
            //log.info("rawBalance: " + rawBalance.get());
            //log.info("rawOrders: " + rawOrders.get());
        }
        catch(Exception e) {
            e.printStackTrace();
            return null;
        }

        // FIXME do actual parsing here
        BitkonanAccountInfo info = new BitkonanAccountInfo();

        return info;  //To change body of implemented methods use File | Settings | File Templates.
    }

    @Override
    public Balance getBalance() {

        WebTarget balanceTarget = client.target("https://bitkonan.com/api/balance/");
        String rawBalance = simpleGetRequest(balanceTarget, String.class);

        JsonObject jsonBalance = jsonFromString(rawBalance);

        log.error("not implemented yet!");

        Balance balance = new Balance(market);


        return balance;
    }

    @Override
    public List<WalletTransaction> getTransactions() {
        log.error("not implemented yet!");
        return new ArrayList<>();
    }

    @Override
    public MarketDepth getMarketDepth(AssetPair asset) {
        Currency base = asset.getBase();
        Currency quote = asset.getQuote();

        // https://bitkonan.com/api/orderbook/?group=0

        WebTarget orderbook = client.target("https://bitkonan.com/api/orderbook/");

        String obString = super.simpleGetRequest(orderbook, String.class);

        JsonObject konanDepth = jsonFromString(obString);

        double[][] asks = parseNestedArray(konanDepth.getJsonArray("asks"));
        double[][] bids = parseNestedArray(konanDepth.getJsonArray("bids"));


        MarketDepth depth = new MarketDepth(asset);

        for(double[] bid : bids) {
            double price = bid[0];
            double volume = bid[1];
            depth.addBid(volume, price);
        }

        for(double[] ask : asks) {
            double price = ask[0];
            double volume = ask[1];
            depth.addAsk(volume, price);
        }

        return depth;
    }

    @Override
    public TickerValue getTicker(AssetPair asset) {


        WebTarget tickerResource = client.target("https://bitkonan.com/api/ticker/");

        BitkonanTickerValue response = simpleGetRequest(tickerResource, BitkonanTickerValue.class);


        TickerValue value = response.getTickerValue();
        value.setAsset(asset);

        return value;
    }

    @Override
    public Number getLag() {
        return 0.12345678910;  //To change body of implemented methods use File | Settings | File Templates.
    }


    @Override
    protected <Form> Invocation.Builder setupProtectedResource(WebTarget res, Entity<Form> entity) {

        Invocation.Builder builder = res.request();

        // Api-Key: The same as generated by our system when you created the API.
        // Api-Secret: message digest as lowercase hexits, generated using HMAC-SHA256 algorithm. Constructed from the the following concatenated strings: [POST Parameters]:[Timestamp].
        // Api-Timestamp: current timestamp in UNIX format.

        String apiKey = getUserId();
        String apiSecret = getSecret();
        long apiTimestamp = (new Date()).getTime()/1000L;

        try {
            Mac mac = Mac.getInstance("HmacSHA256");

            SecretKeySpec secret_spec = new SecretKeySpec(apiSecret.getBytes("UTF-8"), "HmacSHA256");
            mac.init(secret_spec);

            // path + NUL + POST (incl. nonce)
            String content = entity == null ? "" : entity.getEntity().toString();

            String payload = content + ":" + Long.toString(apiTimestamp);

            byte[] rawSignature = mac.doFinal(payload.getBytes());

            String signature = new String(Hex.encodeHex(rawSignature, true));

            builder.header("Api-Key", apiKey);
            //log.debug("Api-Key: {}", apiKey);

            builder.header("Api-Sign", signature);
            //log.debug("Api-Sign: {}", signature);

            builder.header("Api-Timestamp", apiTimestamp);
            //log.debug("Api-Timestamp: {}", apiTimestamp);
        }
        catch(Exception e) {
            e.printStackTrace();
        }

        return builder;  //To change body of implemented methods use File | Settings | File Templates.
    }


    // FIXME: implement these
    @Override
    public List<MarketOrder> getOpenOrders() {
        return null;
    }

    @Override
    public OrderId placeOrder(AssetPair asset, OrderType type, CurrencyValue volume, CurrencyValue price) {
        return null;
    }

    @Override
    public boolean cancelOrder(OrderId order) {
        return false;
    }
}
